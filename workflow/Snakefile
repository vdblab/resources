import os
import sys

import pandas as pd

from pathlib import Path


refs = Path("references")
idxs = Path("indexes")
dbs = Path("dbs")
tax = Path("taxonomy")

configfile: os.path.join(workflow.basedir, "runconfig.yaml")

if config["debug"] == 1:
    MANIFEST = pd.read_csv(os.path.join(workflow.current_basedir, "test_downloads.txt"), sep=",").set_index("name", drop=False)
else:
    MANIFEST = pd.read_csv(os.path.join(workflow.current_basedir, "downloads.txt"), sep=",").set_index("name", drop=False)


MANIFEST["base"]  =  MANIFEST.url.apply(lambda x: os.path.basename(x))

REF_MANIFEST  =  MANIFEST[MANIFEST.kind == "reference"]
DB_MANIFEST  =  MANIFEST[MANIFEST.kind == "db"]


onstart:
    print(MANIFEST)


include: "rules/indexing.smk"
include: "rules/16S.smk"
include: "rules/shotgun.smk"
include: "rules/krakenbracken.smk"


default_container = "docker://ghcr.io/vdblab/utility:0b"


ref_sequences =  expand(f"{refs}/{{org}}/{{name}}/{{version}}/{{base}}",  zip,
                        org=REF_MANIFEST["org"], name=REF_MANIFEST["name"], base=REF_MANIFEST["base"], version=REF_MANIFEST["version"])

all_minimap2_indexes =  expand(f"{idxs}/{{org}}/{{name}}/{{version}}/minimap2/{{base}}.mmi",  zip,
                               org=REF_MANIFEST["org"], name=REF_MANIFEST["name"], base=REF_MANIFEST["base"],
                               version=REF_MANIFEST["version"])

# having the basename in the path is ugly but it makes snakemake happy to have
# the same inputs and output  wildcards.
# So its a tradeoff of cleaner code vs uglier paths
all_snap_indexes =  expand(f"{idxs}/{{org}}/{{name}}/{{version}}/snap/{{base}}/Genome",  zip,
                           org=REF_MANIFEST["org"], name=REF_MANIFEST["name"], base=REF_MANIFEST["base"],
                           version=REF_MANIFEST["version"]
                           )
all_bowtie2_indexes =  expand(f"{idxs}/{{org}}/{{name}}/{{version}}/bowtie2/{{base}}.1.bt2",  zip,
                           org=REF_MANIFEST["org"], name=REF_MANIFEST["name"], base=REF_MANIFEST["base"],
                           version=REF_MANIFEST["version"]
                           )


all_input_vars = [x for x in locals() if x.startswith("all_")]



rule all:
    input:
        [eval(x) for x in all_input_vars],
        ref_sequences,


rule get_refs:
    container: default_container
    output:
        f"{refs}/{{org}}/{{name}}/{{version}}/{{base}}",
    params:
        url=lambda wildcards: REF_MANIFEST.loc[wildcards.name, "url"]
    shell:"""
    wget --continue --read-timeout=1 {params.url} -O {output}
    """

rule get_dbs:
    container: default_container
    output:
        f"{dbs}/{{name}}/{{version}}/{{base}}.tar.gz",
    params:
        url=lambda wildcards: DB_MANIFEST.loc[wildcards.name, "url"]
    resources:
        runtime="12:00",
    shell:"""
    wget --continue --read-timeout=1 {params.url} -O {output}
    # only the metaphlan DB has a md5sum :(
    # wget {params.url}.md5 -O {output}.md5
    # if md5sum -c {params.url}.md5
    # then
    #     echo "Download Success"
    # else
    #     echo "MD5 sum does not match; exiting"
    #     exit 1
    # fi
    """
